Post-2010 TODOs:

- lab1: do user-mode trap handling after memory initialization,
	or else don't panic in mem_init so kernel gets to user-mode test.
	Perhaps move user-mode test to lab2?

- Strip as much unnecessary garbage as possible out of printfmt.c

- Rename 'dev' directory to 'hw', move kern/mp.* into it
	(since it's hardware-related but not really a device driver).

- Isn't it a bug (both in xv6 and PIOS) to EOI on a spurious interrupt?

- If your code panics in user(), then the problem is that printing
requires syscalls. Either implement enough of the syscall to get
printing to work, or do the following. Set IOPL flag to 3 and modify
cputs to NOT call sys_cputs. Basically what that means is the user
processes will print using the same method as the kernel, without going
through the interrupt.

- Don't include the 'refcount' member in 'pageinfo' until lab 3?

- Shouldn't proc_init() be called in init.c _before_ cpu_bootothers()?

- Add a field for the page fault linear address in trapframe?

- Add a singly- and/or doubly-linked list exercise
  using double-indirect pointers to some appropriate homework.

- Make the boot loader clear BSS as a proper ELF loader should,
  since it's not that much harder than making the kernel do it?
  If so, adjust lab 3's program loader text appropriately.

- Split root program loading code out of init() into startroot() function

- Simplify/rationalize kern/console.c a bit -
  e.g., make cons_intr() just dump stuff into an iocons struct directly.
  Get rid of cons.rpos and cons_getc() entirely, probably,
  and make cputs() build atop cons_startio().

- Instead of putting an ELF loader in the kernel,
  just have a user-mode utility that creates an "initial system snapshot"
  containing a loaded root process and an initial file system?

- Lab2 or Lab3 challenge problem: add SYS_GET/SYS_PUT option
  to rearrange the process hierarchy and free processes.

- Make the kernel's program loader push at least minimal args on the stack,
  instead of having to kludge lib/entry.S.

- Rename 'filestate' to 'procstate' and 'files' macro to 'procst' or something?

- Add a lot of incremental checking code to lab3, for each stage;
  try to detect some of the most common errors early, such as:
	- failing to load cr3 when switching processes
	- failing to check that a process is waiting/stopped before readying it
	- failing to set SYS_READ/SYS_WRITE correctly when loading or copying
	- giving copied page mappings GREATER permissions than the source

- In trap() or proc_ret(), check cr3 against proc->pdir.

- rename kern/mp.* to dev/mp.* (or hw/mp.*)?

- see if dirwalk can be simplified by using fileino_create()
	(or a generalized fileino_lookup())

- combine fprintf.c into stdio.c?

- Add an explicit state/type field to struct pageinfo that can distinguish:
	- free pages
	- pages permanently reserved/unused/invalid
	- pages allocated for user data
	- pages allocated as page tables
	- pages allocated as page directories
	- pages allocated as processes
	- pages allocated as CPUs
	- ...

- scrub contents of all pages immediately on free?

- give them the syscall work function skeletons;
  make sure that child number is extracted from regs as a uint8_t?

- Add a checksum of some kind to all the initial files,
  and check them in testfs?

- Eliminate remote ref tracking stuff for migration,
  and instead just force processes always to migrate back home
  before they can migrate anywhere else?

- Add better checker for COPY, MERGE, and ZERO to:
	- make sure EXACTLY the right amount of address space gets processed
	- cover all the copy/leave/merge variations at pdir and ptab level
